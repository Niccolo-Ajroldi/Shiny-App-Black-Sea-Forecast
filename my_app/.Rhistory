ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=-8)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=-8)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=-8)
dev.off()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=0)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=0)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=0)
dev.off()
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-2
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-5
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-7
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
library(latex2exp)
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-9
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
library(latex2exp)
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-12
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-10
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
library(latex2exp)
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-9
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
100*100
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
## simulate data ----
out <- FARSp(n = 19,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices
Xt = out$Xt
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt.gif")
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
?TeX
paste0("Y_%t",t)
t=1
paste0("Y_%t",t)
paste0("Y_",t)
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
rm(list=ls())
source("D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/FARSp.R")
nbasis.1.sim = 5
nbasis.2.sim = 5
nbasis.sim = nbasis.1.sim*nbasis.2.sim
basis.type = "fourier"
x1.grid = seq(from=0, to=1, length=101)
x2.grid = seq(from=0, to=1, length=101)
# Parameters
sample_size = 5
## FAR(1) non-concurrent parameters ----
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.9
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
# set seed
simulation_seed = 1
set.seed(simulation_seed)
## simulate data ----
out <- FARSp(n = 19,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices
Xt = out$Xt
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt.gif")
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt.gif")
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
rm(list=ls())
source("D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/FARSp.R")
nbasis.1.sim = 5
nbasis.2.sim = 5
nbasis.sim = nbasis.1.sim*nbasis.2.sim
basis.type = "fourier"
x1.grid = seq(from=0, to=1, length=101)
x2.grid = seq(from=0, to=1, length=101)
# Parameters
sample_size = 5
## FAR(1) non-concurrent parameters ----
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.9
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
# set seed
simulation_seed = 1
set.seed(simulation_seed)
## simulate data ----
out <- FARSp(n = 19,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices
Xt = out$Xt
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt.gif")
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt.gif")
rm(list=ls())
source("D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/FARSp.R")
nbasis.1.sim = 5
nbasis.2.sim = 5
nbasis.sim = nbasis.1.sim*nbasis.2.sim
basis.type = "fourier"
x1.grid = seq(from=0, to=1, length=101)
x2.grid = seq(from=0, to=1, length=101)
# Parameters
sample_size = 5
## FAR(1) non-concurrent parameters ----
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.5
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
# set seed
simulation_seed = 1
set.seed(simulation_seed)
## simulate data ----
out <- FARSp(n = 19,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices
Xt = out$Xt
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt.gif")
rm(list=ls())
source("D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/FARSp.R")
nbasis.1.sim = 5
nbasis.2.sim = 5
nbasis.sim = nbasis.1.sim*nbasis.2.sim
basis.type = "fourier"
x1.grid = seq(from=0, to=1, length=101)
x2.grid = seq(from=0, to=1, length=101)
# Parameters
sample_size = 5
## FAR(1) non-concurrent parameters ----
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.3
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
# set seed
simulation_seed = 1
set.seed(simulation_seed)
## simulate data ----
out <- FARSp(n = 19,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices
Xt = out$Xt
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt.gif")
rm(list=ls())
source("D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/FARSp.R")
nbasis.1.sim = 5
nbasis.2.sim = 5
nbasis.sim = nbasis.1.sim*nbasis.2.sim
basis.type = "fourier"
x1.grid = seq(from=0, to=1, length=101)
x2.grid = seq(from=0, to=1, length=101)
# Parameters
sample_size = 5
## FAR(1) non-concurrent parameters ----
# d = dimension of the underlying VAR(1)
d=nbasis.sim
Psi1=matrix(0.3,d,d)
diag(Psi1)=0.8
Psi1=Psi1/norm(Psi1, type = "F")*0.3
Psi=array(0,c(d,d,1))
Psi[,,1]=Psi1
my_Sigma=matrix(0.6,d,d)
diag(my_Sigma)=1
my_Sigma=my_Sigma/2
# set seed
simulation_seed = 1
set.seed(simulation_seed)
## simulate data ----
out <- FARSp(n = 19,
Psi = Psi,
x1.grid = x1.grid,
x2.grid = x2.grid,
nbasis.1 = nbasis.1.sim,
nbasis.2 = nbasis.2.sim,
sigma = my_Sigma,
basis.type = basis.type)
# list of matrices
Xt = out$Xt
source('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/my_save_GIF.R')
my_save_GIF(Xt, x1.grid, x2.grid, filename="D:/Poli/TESI/Pics/Yt")
colfunc <- colorRampPalette(c("mediumseagreen", "mediumseagreen"))
colors = colfunc(3)
color = "seagreen3"
maxx = max(sapply(Xt, max))+0.5
minn = min(sapply(Xt, min))-0.5
library(latex2exp)
#x11()
name_dir = "D:/Poli/TESI/Pics/"
png(file = paste0(name_dir,"Evolution.png"), width = 6000, height = 3000, units = "px", res = 400)
par(mfrow=c(1,3))
line=-9
persp(x=x1.grid, y=x2.grid, z=Xt[[1]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{1}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[2]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{2}$"), outer = FALSE,line=line)
persp(x=x1.grid, y=x2.grid, z=Xt[[3]], col=color,
xlab="",ylab="",zlab="",zlim=c(minn,maxx),
ticktype='detailed')
title(TeX("$Y_{3}$"), outer = FALSE,line=line)
dev.off()
install.packages("car")
shiny::runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
?renderPlot
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
750*0.75
750*0.7
1000*0.7
150*2/3
100*2/3
4000*10
24*30
12*30
4000*30
12000*30
8
84.80/(1.1230)
x=84.80/(1.1230)
x+x*0.1230
z
x
mb = 9.56/(1-9.54/100)
sc
mb
sc = 84.80/(1.1230)
mb = 9.56/(1-9.54/100)
sc
mb
sc-sc*0.0954
9.56-9.56*0.0954
mb-mb*0.0954
sc = 84.80/(1.1230)
mb = 9.56/(1-9.54/100)
sc
mb
4*sc  - 21*mb
ce = 122.18
rs = 1.99
mb = 9.56
uj = 4.44
90*rs
ce
10*mb
25*uj
4*mb
1*ce-4*mb
-1*ce+4*mb
-ce+10*uj
122.18*3
270*1.99
400-122.18*3+270*1.99
installed.packages()
library(shiny)
.libPaths()
R.version
.libPaths()
# script installation of older packages
lib_loc <- "C:/Users/nicco/Documents/R/win-library/3.6"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
to_install
install.packages(pkgs = to_install)
library(installr)
library(ggplot2)
shiny::runApp('D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app')
library("shiny")
library("shinythemes")
library('plotly')
library("dplyr")
setwd("D:/Poli/TESI/Code/Time-Series-CP/FAR_2D/Band_visualization/Shiny/Interactive/my_app")
load("data/y_bands.RData")
# num of points in the grid
n_points = sum(indexes_not_NA)
n_points #
# grid
length_grid = n_points
my_grid = 1:n_points
# length of original data
length(Xt_list_of_vec_diff)
# sample size
sample_size = 99
new_sample_size = 1
# number of rolling windows
n_windows = 50
# total number of time steps
n_tot = sample_size+n_windows
n_tot
# validation set
n_validation = 99+500
# keep only the times needed
Xt_list_of_vec = Xt_list_of_vec_diff[1:n_tot]
# validation set
n_validation = 99+500
# List with dates
dates.asDate = as.character(dates.asDate)
dates.list = as.list(dates.asDate)
names(dates.list) = dates.asDate
runApp()
runApp()
library(tidyr)
runApp()
install.packages("crosstalk")
install.packages("crosstalk")
